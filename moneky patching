#1

class Animal:
    def speak(self):
        print("The animal speaks.")

# Original behavior
animal = Animal()
animal.speak()  # Output: The animal speaks.

# Monkey patching the speak method
def new_speak():
    print("The animal roars!")

# Replace the original speak method with new_speak
animal.speak = new_speak

# Modified behavior
animal.speak()  # Output: The animal roars!

# 2

class Car:
    def start(self):
        print("The car starts normally.")

# Original behavior
car = Car()
car.start()  # Output: The car starts normally.

# Monkey patching the start method
def start_with_sound():
    print("The car starts with a loud roar!")

# Replace the original start method with start_with_sound
Car.start = start_with_sound

# Modified behavior
car.start()  # Output: The car starts with a loud roar!

import math_operations

# Original behavior
print(math_operations.add(2, 3))  # Output: 5

# Monkey patching the add function
def subtract(a, b):
    return a - b

# Replace the add function with subtract
math_operations.add = subtract

# Modified behavior
print(math_operations.add(2, 3))  # Output: -1

#3

class Dog:
    def bark(self):
        print("Woof!")

# Create two instances of Dog
dog1 = Dog()
dog2 = Dog()

# Original behavior
dog1.bark()  # Output: Woof!
dog2.bark()  # Output: Woof!

# Patch the bark method for only dog1
def growl():
    print("Grrr!")

dog1.bark = growl

# Modified behavior for dog1
dog1.bark()  # Output: Grrr!

# dog2 remains unaffected
dog2.bark()  # Output: Woof!


# Automating GUI Interactions
#Automating Mouse and Keyboard Actions
#1

import pyautogui

# Move the mouse to the (x, y) position
pyautogui.moveTo(100, 100, duration=1)

# Click the mouse at the current position
pyautogui.click()

# Type a string as keyboard input
pyautogui.write('Hello, world!', interval=0.1)

# Take a screenshot
screenshot = pyautogui.screenshot()
screenshot.save('screenshot.png')

#Dragging and Dropping
#1
import pyautogui

# Move the mouse to the starting position
pyautogui.moveTo(300, 300, duration=1)

# Drag the mouse to draw a square
pyautogui.dragTo(400, 300, duration=1)  # Drag right
pyautogui.dragTo(400, 400, duration=1)  # Drag down
pyautogui.dragTo(300, 400, duration=1)  # Drag left
pyautogui.dragTo(300, 300, duration=1)  # Drag up

#Scrolling the Mouse
#1
import pyautogui

# Scroll up by 500 units
pyautogui.scroll(500)

# Scroll down by 500 units
pyautogui.scroll(-500)

#Handling Keyboard Shortcuts
#1
import pyautogui
import time

# Type some text into an active text editor
pyautogui.write('This text will be copied and pasted.', interval=0.1)

# Select all text (Ctrl+A) and copy (Ctrl+C)
pyautogui.hotkey('ctrl', 'a')
pyautogui.hotkey('ctrl', 'c')

# Move the cursor to a new line and paste (Ctrl+V)
pyautogui.press('enter')
pyautogui.hotkey('ctrl', 'v')

 #Finding and Clicking on a Screen Element
 #1
 import pyautogui

# Locate an image on the screen (e.g., an icon or button)
location = pyautogui.locateOnScreen('example_icon.png', confidence=0.8)

if location:
    # Get the center of the located image
    center = pyautogui.center(location)

    # Move to the center of the image and click
    pyautogui.moveTo(center, duration=1)
    pyautogui.click()
else:
    print("Image not found on the screen.")

#Automating a Form Fill
#1
import pyautogui
import time

# Wait for the form to be ready
time.sleep(2)

# Enter name
pyautogui.write('John Doe', interval=0.1)
pyautogui.press('tab')  # Move to the next field

# Enter email
pyautogui.write('john.doe@example.com', interval=0.1)
pyautogui.press('tab')  # Move to the next field

# Enter phone number
pyautogui.write('1234567890', interval=0.1)
pyautogui.press('tab')  # Move to the next field

# Submit the form
pyautogui.press('enter')

#Automated Login to a Website
#1
import pyautogui
import time

# Open a web browser (e.g., via Start Menu or specific shortcut)
pyautogui.hotkey('win', 's')  # Open Windows search
pyautogui.write('chrome', interval=0.1)
pyautogui.press('enter')

# Wait for the browser to open
time.sleep(2)

# Navigate to the login page
pyautogui.write('https://example-login-page.com', interval=0.1)
pyautogui.press('enter')

# Wait for the page to load
time.sleep(5)

# Enter username
pyautogui.write('username', interval=0.1)
pyautogui.press('tab')  # Move to password field

# Enter password
pyautogui.write('password123', interval=0.1)
pyautogui.press('enter')  # Submit the login form

# Automating Screenshot-Based Navigation
#1
import pyautogui
import time

# Wait for the application to be ready
time.sleep(2)

# Find and click the "Start" button in the app
start_button = pyautogui.locateCenterOnScreen('start_button.png', confidence=0.8)

if start_button:
    pyautogui.click(start_button)
else:
    print("Start button not found.")

# Wait a bit before taking the next action
time.sleep(1)

# Find and click the "Next" button
next_button = pyautogui.locateCenterOnScreen('next_button.png', confidence=0.8)

if next_button:
    pyautogui.click(next_button)
else:
    print("Next button not found.")

#3
#Injecting Scripts into Running Processes
#1
import subprocess

# Start a process (e.g., Notepad on Windows)
process = subprocess.Popen(['notepad.exe'])

# Wait for a few seconds and then terminate the process
import time
time.sleep(5)
process.terminate()


#Running and Interacting with a Command-Line Process
#2
import subprocess

# Start a process (e.g., Python interpreter)
process = subprocess.Popen(['python'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

# Send a command to the Python interpreter
process.stdin.write('print("Hello from the subprocess!")\n')
process.stdin.flush()

# Read the output
output = process.stdout.readline()
print(output)  # Output: Hello from the subprocess!

# Close the process
process.terminate()

#Automating a Windows Application with pywin32
#3
import win32gui
import win32con
import time

# Open Notepad
subprocess.Popen(['notepad.exe'])
time.sleep(2)  # Wait for Notepad to open

# Find the Notepad window by its title
hwnd = win32gui.FindWindow(None, "Untitled - Notepad")

if hwnd:
    # Send some keystrokes to Notepad
    win32gui.SendMessage(hwnd, win32con.WM_SETTEXT, 0, "Hello, this text is from a script!")

    # Minimize the Notepad window
    win32gui.ShowWindow(hwnd, win32con.SW_MINIMIZE)

    time.sleep(2)

    # Restore the Notepad window
    win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)

    # Close the Notepad window
    win32gui.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0)
else:
    print("Notepad window not found.")

    