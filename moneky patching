#1

class Animal:
    def speak(self):
        print("The animal speaks.")

# Original behavior
animal = Animal()
animal.speak()  # Output: The animal speaks.

# Monkey patching the speak method
def new_speak():
    print("The animal roars!")

# Replace the original speak method with new_speak
animal.speak = new_speak

# Modified behavior
animal.speak()  # Output: The animal roars!

# 2

class Car:
    def start(self):
        print("The car starts normally.")

# Original behavior
car = Car()
car.start()  # Output: The car starts normally.

# Monkey patching the start method
def start_with_sound():
    print("The car starts with a loud roar!")

# Replace the original start method with start_with_sound
Car.start = start_with_sound

# Modified behavior
car.start()  # Output: The car starts with a loud roar!

import math_operations

# Original behavior
print(math_operations.add(2, 3))  # Output: 5

# Monkey patching the add function
def subtract(a, b):
    return a - b

# Replace the add function with subtract
math_operations.add = subtract

# Modified behavior
print(math_operations.add(2, 3))  # Output: -1

#3

class Dog:
    def bark(self):
        print("Woof!")

# Create two instances of Dog
dog1 = Dog()
dog2 = Dog()

# Original behavior
dog1.bark()  # Output: Woof!
dog2.bark()  # Output: Woof!

# Patch the bark method for only dog1
def growl():
    print("Grrr!")

dog1.bark = growl

# Modified behavior for dog1
dog1.bark()  # Output: Grrr!

# dog2 remains unaffected
dog2.bark()  # Output: Woof!


# Automating GUI Interactions
#Automating Mouse and Keyboard Actions
#1

import pyautogui

# Move the mouse to the (x, y) position
pyautogui.moveTo(100, 100, duration=1)

# Click the mouse at the current position
pyautogui.click()

# Type a string as keyboard input
pyautogui.write('Hello, world!', interval=0.1)

# Take a screenshot
screenshot = pyautogui.screenshot()
screenshot.save('screenshot.png')

#Dragging and Dropping
#1
import pyautogui

# Move the mouse to the starting position
pyautogui.moveTo(300, 300, duration=1)

# Drag the mouse to draw a square
pyautogui.dragTo(400, 300, duration=1)  # Drag right
pyautogui.dragTo(400, 400, duration=1)  # Drag down
pyautogui.dragTo(300, 400, duration=1)  # Drag left
pyautogui.dragTo(300, 300, duration=1)  # Drag up

#Scrolling the Mouse
#1
import pyautogui

# Scroll up by 500 units
pyautogui.scroll(500)

# Scroll down by 500 units
pyautogui.scroll(-500)

#Handling Keyboard Shortcuts
#1
import pyautogui
import time

# Type some text into an active text editor
pyautogui.write('This text will be copied and pasted.', interval=0.1)

# Select all text (Ctrl+A) and copy (Ctrl+C)
pyautogui.hotkey('ctrl', 'a')
pyautogui.hotkey('ctrl', 'c')

# Move the cursor to a new line and paste (Ctrl+V)
pyautogui.press('enter')
pyautogui.hotkey('ctrl', 'v')

 #Finding and Clicking on a Screen Element
 #1
import pyautogui

# Locate an image on the screen (e.g., an icon or button)
location = pyautogui.locateOnScreen('example_icon.png', confidence=0.8)

if location:
    # Get the center of the located image
    center = pyautogui.center(location)

    # Move to the center of the image and click
    pyautogui.moveTo(center, duration=1)
    pyautogui.click()
else:
    print("Image not found on the screen.")

#Automating a Form Fill
#1
import pyautogui
import time

# Wait for the form to be ready
time.sleep(2)

# Enter name
pyautogui.write('John Doe', interval=0.1)
pyautogui.press('tab')  # Move to the next field

# Enter email
pyautogui.write('john.doe@example.com', interval=0.1)
pyautogui.press('tab')  # Move to the next field

# Enter phone number
pyautogui.write('1234567890', interval=0.1)
pyautogui.press('tab')  # Move to the next field

# Submit the form
pyautogui.press('enter')

#Automated Login to a Website
#1
import pyautogui
import time

# Open a web browser (e.g., via Start Menu or specific shortcut)
pyautogui.hotkey('win', 's')  # Open Windows search
pyautogui.write('chrome', interval=0.1)
pyautogui.press('enter')

# Wait for the browser to open
time.sleep(2)

# Navigate to the login page
pyautogui.write('https://example-login-page.com', interval=0.1)
pyautogui.press('enter')

# Wait for the page to load
time.sleep(5)

# Enter username
pyautogui.write('username', interval=0.1)
pyautogui.press('tab')  # Move to password field

# Enter password
pyautogui.write('password123', interval=0.1)
pyautogui.press('enter')  # Submit the login form

# Automating Screenshot-Based Navigation
#1
import pyautogui
import time

# Wait for the application to be ready
time.sleep(2)

# Find and click the "Start" button in the app
start_button = pyautogui.locateCenterOnScreen('start_button.png', confidence=0.8)

if start_button:
    pyautogui.click(start_button)
else:
    print("Start button not found.")

# Wait a bit before taking the next action
time.sleep(1)

# Find and click the "Next" button
next_button = pyautogui.locateCenterOnScreen('next_button.png', confidence=0.8)

if next_button:
    pyautogui.click(next_button)
else:
    print("Next button not found.")

#3
#Injecting Scripts into Running Processes
#1
import subprocess

# Start a process (e.g., Notepad on Windows)
process = subprocess.Popen(['notepad.exe'])

# Wait for a few seconds and then terminate the process
import time
time.sleep(5)
process.terminate()


#Running and Interacting with a Command-Line Process
#2
import subprocess

# Start a process (e.g., Python interpreter)
process = subprocess.Popen(['python'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

# Send a command to the Python interpreter
process.stdin.write('print("Hello from the subprocess!")\n')
process.stdin.flush()

# Read the output
output = process.stdout.readline()
print(output)  # Output: Hello from the subprocess!

# Close the process
process.terminate()

#Automating a Windows Application with pywin32
#3
import win32gui
import win32con
import time

# Open Notepad
subprocess.Popen(['notepad.exe'])
time.sleep(2)  # Wait for Notepad to open

# Find the Notepad window by its title
hwnd = win32gui.FindWindow(None, "Untitled - Notepad")

if hwnd:
    # Send some keystrokes to Notepad
    win32gui.SendMessage(hwnd, win32con.WM_SETTEXT, 0, "Hello, this text is from a script!")

    # Minimize the Notepad window
    win32gui.ShowWindow(hwnd, win32con.SW_MINIMIZE)

    time.sleep(2)

    # Restore the Notepad window
    win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)

    # Close the Notepad window
    win32gui.PostMessage(hwnd, win32con.WM_CLOSE, 0, 0)
else:
    print("Notepad window not found.")

#Killing a Process by Name with psutil
#4
import psutil

# Find and terminate all Notepad processes
for proc in psutil.process_iter(['pid', 'name']):
    if proc.info['name'] == 'notepad.exe':
        print(f"Terminating process {proc.info['pid']} ({proc.info['name']})")
        proc.terminate()

#Attaching to a Running Process with frida
#5
import frida
import sys

# Define a script to intercept and log calls to MessageBoxW in user32.dll (Windows)
script_code = """
Interceptor.attach(Module.findExportByName("user32.dll", "MessageBoxW"), {
    onEnter: function (args) {
        console.log("MessageBox called!");
        console.log("Text: " + Memory.readUtf16String(args[1]));
    }
});
"""

# Attach to a running process by name
session = frida.attach("notepad.exe")

# Load the script
script = session.create_script(script_code)
script.load()

# Keep the script running
print("Script loaded. Press Ctrl+C to stop.")
try:
    sys.stdin.read()
except KeyboardInterrupt:
    print("Detaching...")
finally:
    session.detach()

#Communicating with a Child Process using Pipes
#6
import subprocess

# Start a process that expects input (e.g., a Python script)
process = subprocess.Popen(['python', '-i'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

# Send a command to the Python process
process.stdin.write('print("Running inside the subprocess")\n')
process.stdin.flush()

# Read the output from the Python process
while True:
    output = process.stdout.readline()
    if not output:
        break
    print(output.strip())

# Cleanly terminate the process
process.terminate()

#Monitoring and Interacting with System Processes
#7
import psutil

# Get the list of all running processes
for proc in psutil.process_iter(['pid', 'name', 'username']):
    print(f"PID: {proc.info['pid']}, Name: {proc.info['name']}, User: {proc.info['username']}")

# Find a specific process and print its memory usage
for proc in psutil.process_iter(['pid', 'name']):
    if proc.info['name'] == 'notepad.exe':
        print(f"Notepad is running with PID {proc.info['pid']}")
        print(f"Memory usage: {proc.memory_info().rss / (1024 * 1024):.2f} MB")

#Executing Shell Commands and Capturing Output
#8

import subprocess

# Execute a shell command and capture the output
result = subprocess.run(['ls', '-l'], capture_output=True, text=True)

# Print the captured output
print(result.stdout)

#Spawning a Detached Background Process
#9
import subprocess
import os

# Start a background process (e.g., a server)
process = subprocess.Popen(['python', '-m', 'http.server'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, start_new_session=True)

# The process runs in the background, independent of the parent
print(f"Started background server with PID {process.pid}")


#4
#Using pywinauto for Windows GUI Automation
#Automating a Windows Application with pywinauto
#1
from pywinauto import application

# Start Notepad
app = application.Application().start("notepad.exe")

# Select the Notepad window
notepad = app.Notepad

# Type text into Notepad
notepad.Edit.type_keys("Hello, this is an automated script!", with_spaces=True)

# Save the file via the File menu
notepad.MenuSelect("File -> SaveAs")

# Interact with the Save As dialog
save_as = app.SaveAs
save_as.Edit.type_keys("example.txt")
save_as.Save.click()

# Close Notepad
notepad.close()


#2
#Automating Calculator
from pywinauto import application

# Start the Calculator application
app = application.Application().start("calc.exe")

# Select the Calculator window
calc = app.Calculator

# Click buttons on the calculator
calc.Button5.click()  # Click '5'
calc.ButtonAdd.click()  # Click '+'
calc.Button3.click()  # Click '3'
calc.ButtonEquals.click()  # Click '='

# Get the result from the calculator
result = calc.Static2.window_text()
print(f"Result: {result}")  # Output: 8

# Close the Calculator
calc.close()

#Automating a File Open Dialog in Notepad
#3
from pywinauto import application

# Start Notepad
app = application.Application().start("notepad.exe")

# Select the Notepad window
notepad = app.Notepad

# Open the File -> Open menu
notepad.MenuSelect("File -> Open")

# Interact with the Open dialog
open_dialog = app.Open
open_dialog.Edit.type_keys("example.txt")
open_dialog.Open.click()

# Close Notepad
notepad.close()

#Automating Windows Task Manager
#4
from pywinauto import application

# Start Task Manager
app = application.Application().start("taskmgr.exe")

# Select the Task Manager window
task_manager = app.TaskManager

# Switch to the 'Processes' tab
task_manager.TabControl.select('Processes')

# Get the list of processes
process_list = task_manager.ListView.children_texts()
print("Processes:", process_list)

# Close Task Manager
task_manager.close()

#Automating Windows Paint Application
#5
from pywinauto import application
import time

# Start MS Paint
app = application.Application().start("mspaint.exe")

# Select the Paint window
paint = app.UntitledPaint

# Select the 'Brushes' tool
paint.Toolbar.child_window(title="Brushes", control_type="SplitButton").click()

# Draw on the canvas (move the mouse and hold the left button)
paint.child_window(title="Ruler").move_mouse_input(coords=(100, 100))
paint.child_window(title="Ruler").drag_mouse_input(coords=(200, 200))

# Wait for the drawing to complete
time.sleep(2)

# Close MS Paint
paint.close()

#Automating Windows File Explorer
#6
from pywinauto import application

# Start File Explorer
app = application.Application().start("explorer.exe")

# Select the File Explorer window
explorer = app.WindowSpecification(title="File Explorer")

# Navigate to a specific folder
explorer.type_keys(r'C:\Users\YourUsername\Documents', with_spaces=True)
explorer.type_keys('{ENTER}')

# Close File Explorer
explorer.close()

#Automating Control Panel
#7
from pywinauto import application

# Start Control Panel
app = application.Application().start("control.exe")

# Select the Control Panel window
control_panel = app.ControlPanel

# Interact with the Control Panel, for example, open 'System and Security'
control_panel.child_window(title="System and Security", control_type="Hyperlink").click()

# Close Control Panel
control_panel.close()

#Handling a Login Dialog
#8
from pywinauto import application

# Start the application that shows a login dialog
app = application.Application().start("your_app.exe")

# Interact with the login dialog
login_dialog = app.Login
login_dialog.Edit1.type_keys("your_username")  # Enter username
login_dialog.Edit2.type_keys("your_password")  # Enter password
login_dialog.OK.click()  # Click the 'OK' button

# Continue interacting with the app after login...

#Automating a Web Browser (Basic)
#9
from pywinauto import application

# Start Internet Explorer
app = application.Application().start("iexplore.exe")

# Select the Internet Explorer window
browser = app.InternetExplorer

# Navigate to a website
browser.Edit.type_keys("https://www.example.com{ENTER}")

# Close Internet Explorer
browser.close()

#5. Web Browser Automation with Selenium
#1
#  Automating Browser Actions with Selenium

from selenium import webdriver

# Set up the WebDriver (e.g., ChromeDriver)
driver = webdriver.Chrome()

# Open a webpage
driver.get("https://www.example.com")


# Find an element and perform an action
search_box = driver.find_element("name", "q")
search_box.send_keys("Python automation")
search_box.submit()

# Wait and then close the browser
driver.implicitly_wait(10)
driver.quit()

#2
#Interacting with Forms and Buttons

from selenium import webdriver
from selenium.webdriver.common.by import By

# Set up the WebDriver (ChromeDriver)
driver = webdriver.Chrome()

# Open a webpage
driver.get("https://www.example.com/login")

# Locate form fields and enter values
username = driver.find_element(By.NAME, "username")
password = driver.find_element(By.NAME, "password")

# Submit the form
login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
login_button.click()

# Wait and then close the browser
driver.implicitly_wait(10)
driver.quit()

# 3
# Handling Alerts and Pop-ups

from selenium import webdriver
from selenium.webdriver.common.by import By

# Set up the WebDriver (ChromeDriver)
driver = webdriver.Chrome()

# Open a webpage that triggers an alert
driver.get("https://www.example.com/alert-page")

# Trigger the alert by clicking a button
alert_button = driver.find_element(By.ID, "trigger-alert")
alert_button.click()

# Switch to the alert and accept it
alert = driver.switch_to.alert
alert.accept()

# Wait and then close the browser
driver.implicitly_wait(5)
driver.quit()

# 4
# Taking a Screenshot

from selenium import webdriver

# Set up the WebDriver (ChromeDriver)
driver = webdriver.Chrome()

# Open a webpage
driver.get("https://www.example.com")

# Take a screenshot and save it
driver.save_screenshot("screenshot.png")

# Close the browser
driver.quit()

#5
#Navigating Between Pages

from selenium import webdriver
from selenium.webdriver.common.by import By

# Set up the WebDriver (ChromeDriver)
driver = webdriver.Chrome()

# Open a webpage
driver.get("https://www.example.com")

# Click a link to navigate to another page
link = driver.find_element(By.LINK_TEXT, "About Us")
link.click()

# Go back to the previous page
driver.back()

# Wait and then close the browser
driver.implicitly_wait(5)
driver.quit()

#6
# Interacting with Dropdowns

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select

# Set up the WebDriver (ChromeDriver)
driver = webdriver.Chrome()

# Open a webpage
driver.get("https://www.example.com/dropdown-page")

# Locate the dropdown menu
dropdown = Select(driver.find_element(By.ID, "dropdown"))

# Select an option by visible text
dropdown.select_by_visible_text("Option 2")

# Select an option by index
dropdown.select_by_index(1)

# Select an option by value
dropdown.select_by_value("option1")

# Close the browser
driver.quit()

#7
#from selenium import webdriver


